# This is a basic workflow to help you get started with Actions

name: Psalm Codescan

# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      github_upload_sarif:
        description: Upload SARIF results to Github. Available in public repos, or private/internal repos for enterprises with Github Advanced Security.
        type: boolean
        default: false
        required: false
      s3_upload_sarif:
        description: Upload SARIF results to AWS S3.
        type: boolean
        default: true
        required: false
      sarif_file:
        description: SARIF file name
        type: string
        default: false
        required: true
      security_analysis:
        description: Enable Psalm's code security analysis
        type: boolean
        default: true
        required: false
      composer_ignore_platform_reqs:
        description: Disable/Enable ignoring platform reqs during the `composer install` step
        type: boolean
        default: true
        required: false
      composer_require_dev:
        description: Disable/Enable installation of modules under the `require-dev` section of the composer.json file
        type: boolean
        default: true
        required: false

    secrets:
      AWS_ACCESS_KEY_ID:
        description: AWS Access Key ID for S3 Uploading of SARIF file
        required: false
      AWS_SECRET_ACCESS_KEY:
        description: AWS Secret Access Key for S3 Uploading of SARIF file
        required: false
      AWS_BUCKET:
        description: AWS S3 Bucket to be used for uploading the sarif file
        required: false

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Start the Psalm Security scan and generate a sarif file
      - name: Psalm Security Scan
        uses: docker://vimeo/psalm-github-actions
        with:
          composer_require_dev: ${{ inputs.composer_require_dev }}
          composer_ignore_platform_reqs: ${{ inputs.composer_ignore_platform_reqs }}
          security_analysis: ${{ inputs.security_analysis }}
          report_file: ${{ inputs.sarif_file }}

      # Github actions supports dependency caching, allowing Composer downloads to be cached between workflows, as long as the composer.lock file has not changed.
      # This produces much faster builds, as the composer install command does not have to download files over the network at all if the cache is valid.
      - name: Cache Composer dependencies
        uses: actions/cache@v2
        with:
          path: /tmp/composer-cache
          key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}

      # Move the SARIF file to a directory since the next step does not support single file upload
      # Ref: https://github.com/shallwefootball/upload-s3-action/issues/6
      # The indicated `source_dir` will be used but will only upload the files inside it and not include the directory itself
      - name: Move SARIF file
        run: |
          cd ${{ github.workspace }}
          mkdir artifacts/
          mv results.sarif artifacts/${{ github.sha }}.sarif

      - name: Upload Security Analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ inputs.sarif_file }}
        if: inputs.github_upload_sarif

      - name: SARIF File Upload (S3)
        uses: shallwefootball/upload-s3-action@v1.1.3
        with:
          aws_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          aws_bucket: ${{ secrets.AWS_BUCKET }}
          source_dir: 'artifacts'
          destination_dir: 'sarif-results'
        if: inputs.s3_upload_sarif